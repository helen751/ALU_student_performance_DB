-- Create a database for tracking all alu student performance
CREATE DATABASE ALU_student_performance_DB;

-- Switch to using the new database
USE ALU_student_performance_DB;

-- creating the students table storing their ID, name and intake
CREATE TABLE students (
    student_id INT AUTO_INCREMENT PRIMARY KEY,   -- unique ID and Primary key, automatically generated by the system
    student_name VARCHAR(100) NOT NULL,          -- student full name
    intake_year YEAR NOT NULL                    -- the intake year
);

-- creating the linux grade table that stores the linux course grades of all students present in the students table
CREATE TABLE linux_grades (
    course_id VARCHAR(10) default 'Lin2025-01',              -- Unique ID for the course set at default
    course_name VARCHAR(50) DEFAULT 'Linux',     -- course name, default "Linux"
    student_id INT,                              -- Foreign Key referencing students ID
    -- student grade with CHECK constraint, limited to numbers from 0-100
    grade_obtained INT CHECK (grade_obtained BETWEEN 0 AND 100),

    PRIMARY KEY (course_id, student_id),         -- ensures one grade per student per course
    -- creating the relationship, referencing the student_id in this table to the student_id in students table
    FOREIGN KEY (student_id) REFERENCES students(student_id)
);

-- creating the python grades table to store records of all students python grades
CREATE TABLE python_grades (
    course_id VARCHAR(10) default 'Pyt2025-01',  -- Unique ID for the course set at default
    course_name VARCHAR(50) DEFAULT 'Python',    -- course name, default "Python"
    student_id INT,                              -- Foreign Key referencing students ID
    -- student grade with CHECK constraint, limited to numbers from 0-100
    grade_obtained INT CHECK (grade_obtained BETWEEN 0 AND 100),

    PRIMARY KEY (course_id, student_id),         -- ensures one grade per student per course
    -- creating the relationship, referencing the student_id in this table to the student_id in students table
    FOREIGN KEY (student_id) REFERENCES students(student_id)
);


select * from students;
select * from linux_grades;
select * from python_grades;
#Query 3: Find students who took only one course (either Linux or Python, not both).
SELECT s.student_id, s.student_name, 'Linux Only' AS course_status
FROM students s
JOIN linux_grades l ON s.student_id = l.student_id
WHERE s.student_id NOT IN (SELECT student_id FROM python_grades)

UNION

SELECT s.student_id, s.student_name, 'Python Only' AS course_status
FROM students s
JOIN python_grades p ON s.student_id = p.student_id
WHERE s.student_id NOT IN (SELECT student_id FROM linux_grades);

#Query 4: Find students who took both courses (Linux and Python).
SELECT DISTINCT s.student_id, s.student_name
FROM students s
JOIN linux_grades l ON s.student_id = l.student_id
JOIN python_grades p ON s.student_id = p.student_id;
